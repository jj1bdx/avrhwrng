
avrhwrng.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000280  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000b88  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d8f  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001c0b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000280f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

/* initialize IO ports */
static void ioinit(void) {

    /* disable interrupt before initialization*/
    cli();
  80:	f8 94       	cli

    /*
     * forced initialization
     * of unnecessary interrupts
     */
    MCUCR = 0x00;
  82:	15 be       	out	0x35, r1	; 53
    EICRA = 0x00;
  84:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = 0x00;
  88:	1d ba       	out	0x1d, r1	; 29
    TIMSK0 = 0x00;
  8a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    TIMSK1 = 0x00;
  8e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TIMSK2 = 0x00;
  92:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    PCMSK0 = 0x00;
  96:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    PCMSK1 = 0x00;
  9a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
    PCMSK2 = 0x00;
  9e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    PCICR = 0x00;
  a2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    PRR = 0x00;
  a6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     * PD6/Pin 6 to input
     * TXD/PD1/Pin 1 to output
     * RXD/PD0/Pin 0 to input
     * pullup enabled
     */
    DDRD = 0x3e;
  aa:	8e e3       	ldi	r24, 0x3E	; 62
  ac:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8b b9       	out	0x0b, r24	; 11

    /* PCx all output, pulled up */
    DDRC = 0xff;
  b2:	87 b9       	out	0x07, r24	; 7
    PORTC = 0xff;
  b4:	88 b9       	out	0x08, r24	; 8

    /* PB5 = LED on Arduino 2009 */
    DDRB = 0xff;
  b6:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x3f;
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	85 b9       	out	0x05, r24	; 5

    /* comparator disabled */
    ACSR = 0x80;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	80 bf       	out	0x30, r24	; 48

    /* USART 0 */
    /* no USART IRQ, disable TX/RX */
    UCSR0B = 0x00;
  c0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* clk 1x */
    UCSR0A = 0x00;
  c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    /* async, no parity, 8bit */
    UCSR0C = 0x06;
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    /* baud rate (11520bps, 16MHz, U2Xn=1) */
    /* real rate: 111111bps (9 microsecs/bit) */
    UBRR0H = 0;
  ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 8;
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* no USART IRQ, enable TX (no RX) */
    UCSR0B = 0x08;
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Timer 0 */
    /* timer stop */
    TCCR0B = 0x00;
  dc:	15 bc       	out	0x25, r1	; 37
    /* reset counter */
    TCNT0 = 0;
  de:	16 bc       	out	0x26, r1	; 38
    /* no external output, CTC */
    TCCR0A = 0x02;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
     * from Port D (PD7 and PD6 together)
     * The timer period should not be smaller than
     * 110000 / 10 * 8 * 2 * 2 = 352000Hz or 2.84 microseconds
     */
    /* timer period: 46 machine cycles = 2.875 microseconds */
    OCR0A = 46 - 1;
  e4:	8d e2       	ldi	r24, 0x2D	; 45
  e6:	87 bd       	out	0x27, r24	; 39
    /* clk (16MHz or 0.0625 microsecond / count) */
    /* start timer */
    TCCR0B = 0x01;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	85 bd       	out	0x25, r24	; 37
    uint8_t j = 0;
    uint8_t p2 = 0;
    uint8_t p2b = 0;
    uint8_t state = 0;
    uint8_t oval0 = 0;
    uint8_t oval1 = 0;
  ec:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t oval0 = 0;
  ee:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t state = 0;
  f0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t p2b = 0;
  f2:	e0 e0       	ldi	r30, 0x00	; 0
    uint8_t j = 0;
  f4:	40 e0       	ldi	r20, 0x00	; 0
    uint8_t p = 0;
  f6:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t i = 0;
  f8:	20 e0       	ldi	r18, 0x00	; 0
            flagandbit0 = 0;
        }
        /* print accumulated value */
        if (i > 7) {
            /* flip PORTB LED */
            PORTB ^= 0x40;
  fa:	f0 e4       	ldi	r31, 0x40	; 64
        if ((TIFR0 & 0x02) == 0) {
  fc:	a9 9b       	sbis	0x15, 1	; 21
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x7c>
        TIFR0 |= 0x02;
 100:	a9 9a       	sbi	0x15, 1	; 21
        sval = PIND >> 6;
 102:	89 b1       	in	r24, 0x09	; 9
 104:	82 95       	swap	r24
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	83 70       	andi	r24, 0x03	; 3
        if (state == 0) {
 10c:	31 11       	cpse	r19, r1
 10e:	1b c0       	rjmp	.+54     	; 0x146 <main+0xc6>
            oval0 = sval & 0x01;
 110:	68 2f       	mov	r22, r24
 112:	61 70       	andi	r22, 0x01	; 1
            oval1 = sval & 0x02;
 114:	78 2f       	mov	r23, r24
 116:	72 70       	andi	r23, 0x02	; 2
            state = 1;
 118:	31 e0       	ldi	r19, 0x01	; 1
        if (i > 7) {
 11a:	28 30       	cpi	r18, 0x08	; 8
 11c:	78 f3       	brcs	.-34     	; 0xfc <main+0x7c>
            PORTB ^= 0x40;
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8f 27       	eor	r24, r31
 122:	85 b9       	out	0x05, r24	; 5
            /* clear counters and buffer */
            p = 0;
            i = 0;
            /* change byte xor machine state */
            j++;
            if (j > 1) {
 124:	41 11       	cpse	r20, r1
 126:	88 c0       	rjmp	.+272    	; 0x238 <main+0x1b8>
 128:	e9 2f       	mov	r30, r25
            p = 0;
 12a:	90 e0       	ldi	r25, 0x00	; 0
            i = 0;
 12c:	20 e0       	ldi	r18, 0x00	; 0
            state = 1;
 12e:	31 e0       	ldi	r19, 0x01	; 1
            j++;
 130:	41 e0       	ldi	r20, 0x01	; 1
        if ((TIFR0 & 0x02) == 0) {
 132:	a9 9b       	sbis	0x15, 1	; 21
 134:	e3 cf       	rjmp	.-58     	; 0xfc <main+0x7c>
        TIFR0 |= 0x02;
 136:	a9 9a       	sbi	0x15, 1	; 21
        sval = PIND >> 6;
 138:	89 b1       	in	r24, 0x09	; 9
 13a:	82 95       	swap	r24
 13c:	86 95       	lsr	r24
 13e:	86 95       	lsr	r24
 140:	83 70       	andi	r24, 0x03	; 3
        if (state == 0) {
 142:	33 23       	and	r19, r19
 144:	29 f3       	breq	.-54     	; 0x110 <main+0x90>
 146:	58 2f       	mov	r21, r24
 148:	51 70       	andi	r21, 0x01	; 1
 14a:	82 70       	andi	r24, 0x02	; 2
            if ((sval & 0x01) != oval0) {
 14c:	56 17       	cp	r21, r22
 14e:	09 f4       	brne	.+2      	; 0x152 <main+0xd2>
 150:	50 c0       	rjmp	.+160    	; 0x1f2 <main+0x172>
                if (oval0 == 0) {
 152:	61 11       	cpse	r22, r1
 154:	60 c0       	rjmp	.+192    	; 0x216 <main+0x196>
            if ((sval & 0x02) != oval1) {
 156:	87 17       	cp	r24, r23
 158:	09 f4       	brne	.+2      	; 0x15c <main+0xdc>
 15a:	74 c0       	rjmp	.+232    	; 0x244 <main+0x1c4>
                    flagandbit0 = 1;
 15c:	83 2f       	mov	r24, r19
                    flagandbit1 = 2;
 15e:	52 e0       	ldi	r21, 0x02	; 2
                if (oval1 == 0) {
 160:	71 11       	cpse	r23, r1
 162:	01 c0       	rjmp	.+2      	; 0x166 <main+0xe6>
                    flagandbit1 = 1;
 164:	53 2f       	mov	r21, r19
            p = p + p;
 166:	99 0f       	add	r25, r25
            p += flagandbit0 & 0x01;
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	89 0f       	add	r24, r25
            i++;
 16c:	2f 5f       	subi	r18, 0xFF	; 255
        if (i > 7) {
 16e:	28 30       	cpi	r18, 0x08	; 8
 170:	28 f5       	brcc	.+74     	; 0x1bc <main+0x13c>
            }
        }
        /* check whether a random bit is found on PD7 */
        if (flagandbit1 != 0) {
            /* accumulate 8 bits */
            p = p + p;
 172:	98 2f       	mov	r25, r24
 174:	99 0f       	add	r25, r25
            p += flagandbit1 & 0x01;
 176:	51 70       	andi	r21, 0x01	; 1
 178:	95 0f       	add	r25, r21
            i++;
 17a:	2f 5f       	subi	r18, 0xFF	; 255
            /* reset the von-Neumann check flag for PD7 */
            flagandbit1 = 0;
        }
        /* print accumulated value */
        if (i > 7) {
 17c:	28 30       	cpi	r18, 0x08	; 8
 17e:	a9 f4       	brne	.+42     	; 0x1aa <main+0x12a>
            /* flip PORTB LED */
            PORTB ^= 0x40;
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8f 27       	eor	r24, r31
 184:	85 b9       	out	0x05, r24	; 5
            /* clear counters and buffer */
            p = 0;
            i = 0;
            /* change byte xor machine state */
            j++;
            if (j > 1) {
 186:	44 23       	and	r20, r20
 188:	61 f0       	breq	.+24     	; 0x1a2 <main+0x122>
                j = 0;
                /* and output the result in a raw byte*/
                putchr(p2b ^ p2);
 18a:	9e 27       	eor	r25, r30
    loop_until_bit_is_set(UCSR0A, UDRE0);
 18c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 190:	85 ff       	sbrs	r24, 5
 192:	fc cf       	rjmp	.-8      	; 0x18c <main+0x10c>
    UDR0 = c;
 194:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 198:	30 e0       	ldi	r19, 0x00	; 0
                j = 0;
 19a:	40 e0       	ldi	r20, 0x00	; 0
            p = 0;
 19c:	90 e0       	ldi	r25, 0x00	; 0
            i = 0;
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	ad cf       	rjmp	.-166    	; 0xfc <main+0x7c>
            p += flagandbit1 & 0x01;
 1a2:	e9 2f       	mov	r30, r25
            p = 0;
 1a4:	90 e0       	ldi	r25, 0x00	; 0
            i = 0;
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	43 2f       	mov	r20, r19
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	a7 cf       	rjmp	.-178    	; 0xfc <main+0x7c>
            p = p + p;
 1ae:	89 2f       	mov	r24, r25
 1b0:	88 0f       	add	r24, r24
            i++;
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
        if (i > 7) {
 1b4:	28 30       	cpi	r18, 0x08	; 8
 1b6:	08 f4       	brcc	.+2      	; 0x1ba <main+0x13a>
 1b8:	42 c0       	rjmp	.+132    	; 0x23e <main+0x1be>
 1ba:	50 e0       	ldi	r21, 0x00	; 0
            PORTB ^= 0x40;
 1bc:	95 b1       	in	r25, 0x05	; 5
 1be:	9f 27       	eor	r25, r31
 1c0:	95 b9       	out	0x05, r25	; 5
            if (j > 1) {
 1c2:	44 23       	and	r20, r20
 1c4:	89 f1       	breq	.+98     	; 0x228 <main+0x1a8>
            p += flagandbit0 & 0x01;
 1c6:	98 2f       	mov	r25, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
                putchr(p2b ^ p2);
 1ca:	9e 27       	eor	r25, r30
    loop_until_bit_is_set(UCSR0A, UDRE0);
 1cc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1d0:	85 ff       	sbrs	r24, 5
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <main+0x14c>
    UDR0 = c;
 1d4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        if (flagandbit1 != 0) {
 1d8:	55 23       	and	r21, r21
 1da:	f9 f2       	breq	.-66     	; 0x19a <main+0x11a>
 1dc:	43 2f       	mov	r20, r19
 1de:	8e 2f       	mov	r24, r30
                j = 0;
 1e0:	30 e0       	ldi	r19, 0x00	; 0
            p += flagandbit1 & 0x01;
 1e2:	95 2f       	mov	r25, r21
 1e4:	91 70       	andi	r25, 0x01	; 1
 1e6:	e8 2f       	mov	r30, r24
 1e8:	84 2f       	mov	r24, r20
 1ea:	43 2f       	mov	r20, r19
 1ec:	38 2f       	mov	r19, r24
            i++;
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	85 cf       	rjmp	.-246    	; 0xfc <main+0x7c>
            if ((sval & 0x02) != oval1) {
 1f2:	87 17       	cp	r24, r23
 1f4:	b9 f1       	breq	.+110    	; 0x264 <main+0x1e4>
                if (oval1 == 0) {
 1f6:	77 23       	and	r23, r23
 1f8:	79 f1       	breq	.+94     	; 0x258 <main+0x1d8>
        if (i > 7) {
 1fa:	89 2f       	mov	r24, r25
                    flagandbit1 = 2;
 1fc:	52 e0       	ldi	r21, 0x02	; 2
        if (i > 7) {
 1fe:	28 30       	cpi	r18, 0x08	; 8
 200:	08 f4       	brcc	.+2      	; 0x204 <main+0x184>
 202:	b7 cf       	rjmp	.-146    	; 0x172 <main+0xf2>
                    flagandbit1 = 2;
 204:	52 e0       	ldi	r21, 0x02	; 2
            PORTB ^= 0x40;
 206:	85 b1       	in	r24, 0x05	; 5
 208:	8f 27       	eor	r24, r31
 20a:	85 b9       	out	0x05, r24	; 5
            if (j > 1) {
 20c:	89 2f       	mov	r24, r25
 20e:	44 23       	and	r20, r20
 210:	41 f3       	breq	.-48     	; 0x1e2 <main+0x162>
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	da cf       	rjmp	.-76     	; 0x1ca <main+0x14a>
            if ((sval & 0x02) != oval1) {
 216:	87 17       	cp	r24, r23
 218:	51 f2       	breq	.-108    	; 0x1ae <main+0x12e>
                    flagandbit0 = 2;
 21a:	82 e0       	ldi	r24, 0x02	; 2
                    flagandbit1 = 2;
 21c:	52 e0       	ldi	r21, 0x02	; 2
                if (oval1 == 0) {
 21e:	71 11       	cpse	r23, r1
 220:	a2 cf       	rjmp	.-188    	; 0x166 <main+0xe6>
                    flagandbit1 = 1;
 222:	56 2f       	mov	r21, r22
                if (oval1 == 0) {
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	9f cf       	rjmp	.-194    	; 0x166 <main+0xe6>
        if (flagandbit1 != 0) {
 228:	51 11       	cpse	r21, r1
 22a:	db cf       	rjmp	.-74     	; 0x1e2 <main+0x162>
            p += flagandbit0 & 0x01;
 22c:	e8 2f       	mov	r30, r24
            j++;
 22e:	43 2f       	mov	r20, r19
        if (flagandbit1 != 0) {
 230:	30 e0       	ldi	r19, 0x00	; 0
            p = 0;
 232:	90 e0       	ldi	r25, 0x00	; 0
            i = 0;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	62 cf       	rjmp	.-316    	; 0xfc <main+0x7c>
            if (j > 1) {
 238:	50 e0       	ldi	r21, 0x00	; 0
            state = 1;
 23a:	34 2f       	mov	r19, r20
 23c:	c6 cf       	rjmp	.-116    	; 0x1ca <main+0x14a>
            p += flagandbit0 & 0x01;
 23e:	98 2f       	mov	r25, r24
        if (i > 7) {
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	5c cf       	rjmp	.-328    	; 0xfc <main+0x7c>
            p = p + p;
 244:	99 0f       	add	r25, r25
            p += flagandbit0 & 0x01;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	89 0f       	add	r24, r25
            i++;
 24a:	2f 5f       	subi	r18, 0xFF	; 255
        if (i > 7) {
 24c:	28 30       	cpi	r18, 0x08	; 8
 24e:	08 f0       	brcs	.+2      	; 0x252 <main+0x1d2>
 250:	b4 cf       	rjmp	.-152    	; 0x1ba <main+0x13a>
 252:	30 e0       	ldi	r19, 0x00	; 0
            p += flagandbit0 & 0x01;
 254:	98 2f       	mov	r25, r24
 256:	52 cf       	rjmp	.-348    	; 0xfc <main+0x7c>
                    flagandbit1 = 1;
 258:	53 2f       	mov	r21, r19
        if (i > 7) {
 25a:	89 2f       	mov	r24, r25
 25c:	28 30       	cpi	r18, 0x08	; 8
 25e:	08 f4       	brcc	.+2      	; 0x262 <main+0x1e2>
 260:	88 cf       	rjmp	.-240    	; 0x172 <main+0xf2>
 262:	d1 cf       	rjmp	.-94     	; 0x206 <main+0x186>
 264:	28 30       	cpi	r18, 0x08	; 8
 266:	08 f4       	brcc	.+2      	; 0x26a <main+0x1ea>
 268:	a0 cf       	rjmp	.-192    	; 0x1aa <main+0x12a>
            PORTB ^= 0x40;
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	8f 27       	eor	r24, r31
 26e:	85 b9       	out	0x05, r24	; 5
            if (j > 1) {
 270:	44 23       	and	r20, r20
 272:	09 f4       	brne	.+2      	; 0x276 <main+0x1f6>
 274:	96 cf       	rjmp	.-212    	; 0x1a2 <main+0x122>
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	a7 cf       	rjmp	.-178    	; 0x1ca <main+0x14a>

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
